<?php

/**
 * Implementation of hook_menu
 */
function metakinisi_menu() {
  $items = array();
  $items['metakinisi/trips'] = array(
      'title' => 'Trips',
      'page callback' => 'metakinisi_trips',
      'page arguments' => array(),
      'access arguments' => array('access content'),
      'description' => 'My Trips',
      'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function metakinisi_track($node) {
  $q = db_select('metakinisi_track', 'm');
  $q->fields('m');
  $q->condition( 'nid', $node->nid, "=");
  foreach ($q->execute() as $t) {
    return $t;
  }
  return NULL;
}

function metakinisi_tracks($uid) {
  $sql = "SELECT node.nid, node.title, field_label_value AS label, track_start, track_end, track_length" .
          " FROM {node} AS node" .
          " LEFT JOIN {field_data_field_route} AS field" .
          " ON field.revision_id = node.vid AND field.entity_type = 'node'" .
          " LEFT JOIN {node} AS route ON route.nid = field_route_target_id" .
          " LEFT JOIN {metakinisi_track} AS track ON node.nid = track.nid" .
          " JOIN {field_data_field_label} AS label" .
          " ON label.revision_id = route.vid AND label.entity_type = 'node'" .
          " WHERE node.uid = $uid" .
          " ORDER BY COALESCE( track_start, node.created ) DESC";
  $q = db_query($sql);
  $list = array();
  Log::info('result', $q);
  foreach ($q as $t) {
    $list[] = $t;    
  }
  return $list;
}

function _metakinisi_format_length($length) {  
  return sprintf( "%0.1f Km", $length);
}

function _metakinisi_format_datetime($time) {  
  return date( 'd-m-Y H:i', $time);
}

function _metakinisi_format_duration($seconds) {
  $minutes = $seconds / 60;
  if ( $minutes < 60 ) {
    return sprintf( "%02d'", $minutes);
  } else {
    $hours = $minutes / 60;
    $minutes = $minutes % 60;
    return sprintf( "%d:%02d", $hours, $minutes );
  }
}

function _metakinisi_weekday($time) {
  // Don't use format_date, because of timezone bug
  // Instead do the translation ourselves.
  static $days;
  if ( ! $days ) {
    $days = array(
    t('Sunday'),
    t('Monday'),
    t('Tuesday'),
    t('Wednesday'),
    t('Thursday'),
    t('Friday'),
    t('Saturday'),
    );
  }
  $fields = getdate($time);
  return $days[$fields['wday']];
}

function _metakinisi_computed_headers() {
  return array( t('Date'), t('Weekday'), t('Start'), t('Duration'), t('Length'));  
}

function _metakinisi_computed_values($t) {
    $date = t('Not computed yet');
    $time = '';
    $weekday = '';
    $duration = '';
    $length = '';
    if ( $t && $t->track_start != 0 ) {
      $date = date( 'd-m-Y', $t->track_start);
      $time = date( 'H:i', $t->track_start);
      $weekday = _metakinisi_weekday($t->track_start);
      $duration = _metakinisi_format_duration($t->track_end - $t->track_start);
      $length = _metakinisi_format_length($t->track_length);
    }
    return array($date, $weekday, $time, $duration, $length);
}

function _metakinisi_row($label, $value) {
  return array($label . ':', $value);
}
/**
 * Implementation of hook_node_view
 */
function metakinisi_node_view($node, $view_mode, $langcode) {
  if ( $node->type == 'track' ) {    
    $t = metakinisi_track($node);
    $rows = array_map( '_metakinisi_row',
            _metakinisi_computed_headers(), _metakinisi_computed_values($t));
    $value = theme('table', array( 'rows' => $rows));
    $node->content['track_summary'] = array(
      //'#markup' => theme('table', array( 'rows' => $rows)),
      '#markup' => $value,
      '#weight' => 10,
      //'#theme' => 'mymodule_my_additional_field',
    );
  }
}

/**
 * Implementation of hook_node_update
 */
function metakinisi_node_update($node) {
  if ($node->type == 'track' ) {
    $q = db_delete('metakinisi_track');
    $q->condition( 'nid', $node->nid );
    $q->execute();
  }
}

function metakinisi_trips() {
  global $user;  
  $headers = array( t('Trip'), t('Line'));
  $headers = array_merge($headers, _metakinisi_computed_headers());
  $rows = array();
  $tracks = metakinisi_tracks($user->uid);
  foreach($tracks as $t) {
    $row = array(l($t->title, "node/$t->nid"), $t->label);            
    $row = array_merge( $row, _metakinisi_computed_values($t));
    $rows[] = $row;
  }
  return theme('table', array( 'header' => $headers, 'rows' => $rows));
  
}