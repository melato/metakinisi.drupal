<?php

class Metakinisi {
  const STATUS_OK = 1;
  const STATUS_ERROR = 2;
  const STATUS_NO_DATA = 3;
};

/**
 * Implementation of hook_menu
 */
function metakinisi_menu() {
  $items = array();
  $items['metakinisi/trips'] = array(
      'title' => 'Trips',
      'page callback' => 'metakinisi_trips',
      'page arguments' => array(),
      'access arguments' => array('access content'),
      'description' => 'My Trips',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['metakinisi/routes'] = array(
      'title' => 'Route Statistics',
      'page callback' => 'metakinisi_routes',
      'page arguments' => array(),
      'access arguments' => array('access content'),
      'description' => 'Statistics about Recorded Trips',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['metakinisi/route/%node'] = array(
      'title' => 'Route',
      'page callback' => 'metakinisi_route',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
      'description' => 'Derived information about one Route',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['metakinisi/map/%node'] = array(
      'title' => 'Map',
      'page callback' => 'metakinisi_map',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
      'description' => 'Trip Map',
      'type' => MENU_CALLBACK,
  );
  $items['admin/config/metakinisi'] = array(
    'title' => 'Metakinisi',
    'description' => 'Configure Settings for Metakinisi.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('metakinisi_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'metakinisi.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );  
  return $items;
}

function metakinisi_track($node) {
  $sql = "SELECT node.nid, node.title," .
          " m.status, track_start, track_duration, track_length" .
          " FROM {metakinisi_track} AS m" .
          " LEFT JOIN {node} AS node ON m.route_id = node.nid" .
          " WHERE m.nid = ?";

  $q = db_query($sql, array($node->nid));
  foreach ($q as $t) {
    return $t;
  }
  return NULL;
}

function metakinisi_passes($node) {
  $sql = "SELECT stop.seq, marker.name, pass_time AS time, distance" .
          " FROM {metakinisi_pass} AS pass" .
          " JOIN {metakinisi_stop} AS stop ON pass.sid = stop.sid" .
          " JOIN {metakinisi_marker} AS marker ON marker.mid = stop.mid" .
          " JOIN {metakinisi_track} AS track ON track.tid = pass.tid" .
          " WHERE track.nid = ?" .
          " ORDER BY stop.seq ASC";

  $q = db_query($sql, array($node->nid));
  $list = array();
  foreach ($q as $t) {
    $list[] = $t;
  }
  return $list;
}

function metakinisi_tracks($uid) {
  $sql = "SELECT node.nid, node.title," .
          " field_route_target_id AS field_route, track.route_id, field_label_value AS label," .
          " track.status, track_start, track_duration, track_length" .
          " FROM {node} AS node" .
          " LEFT JOIN {field_data_field_route} AS field" .
          " ON field.revision_id = node.vid AND field.entity_type = 'node'" .
          " LEFT JOIN {node} AS route ON route.nid = field_route_target_id" .
          " LEFT JOIN {metakinisi_track} AS track ON node.nid = track.nid" .
          " LEFT JOIN {field_data_field_label} AS label" .
          " ON label.revision_id = route.vid AND label.entity_type = 'node'" .
          " WHERE node.type = ? AND node.uid = ?" .
          " ORDER BY COALESCE( track_start, node.created ) DESC";
  $schema = _metakinisi_schema();
  $q = db_query($sql, array( $schema->trackContentType, $uid ));
  $list = array();
  foreach ($q as $t) {
    $list[] = $t;    
  }
  return $list;
}

function metakinisi_route_statistics() {
  $sql = "SELECT stats.rid, field_label_value AS label," .
          " first_marker.name AS first_name," .
          " last_marker.name AS last_name," .
          " stats.tracks, stats.stops, stats.passes, stats.unique_passes, stats.speed" .
          " FROM {metakinisi_route_statistics} AS stats" .
          " JOIN {node} AS node ON node.nid = stats.rid" .
          " JOIN {field_data_field_label} AS label " .
          " ON label.revision_id = node.vid AND label.entity_type = 'node'" .
          " JOIN {metakinisi_stop} AS first_stop ON first_stop.sid = stats.first_sid" .
          " JOIN {metakinisi_marker} AS first_marker ON first_marker.mid = first_stop.mid" .
          " JOIN {metakinisi_stop} AS last_stop ON last_stop.sid = stats.last_sid" .
          " JOIN {metakinisi_marker} AS last_marker ON last_marker.mid = last_stop.mid" .
          " WHERE stats.tracks > 0" .
          " ORDER BY field_label_value ASC, stats.unique_passes DESC";
  $q = db_query($sql);
  $list = array();
  foreach ($q as $t) {
    $list[] = $t;    
  }
  return $list;
}

function metakinisi_stops($rid) {
  $sql = "SELECT stop.sid, stop.seq, stop.duration, stop.deviation, stop.count, marker.name" .
          " FROM {metakinisi_stop} AS stop" .
          " JOIN {metakinisi_marker} AS marker ON stop.mid = marker.mid" .
          " WHERE stop.rid = ?" .
          " ORDER BY stop.seq ASC";
  $q = db_query($sql, array($rid));
  $list = array();
  foreach ($q as $t) {
    $list[] = $t;    
  }
  return $list;
}

function _metakinisi_format_length($length) {  
  return sprintf( "%0.1f Km", $length / 1000.0);
}

function _metakinisi_format_datetime($time) {  
  return date( 'd-m-Y H:i', $time);
}

function _metakinisi_format_duration($seconds) {
  $minutes = $seconds / 60;
  if ( $minutes < 60 ) {
    return sprintf( "%02d'", $minutes);
  } else {
    $hours = $minutes / 60;
    $minutes = $minutes % 60;
    return sprintf( "%d:%02d", $hours, $minutes );
  }
}

function _metakinisi_format_speed($distance, $time) {
  if ( $time == 0 )
    return '';
  return sprintf( "%0.0f", $distance / $time * 3600.0 / 1000.0);
}

function _metakinisi_weekday($time) {
  // Don't use format_date, because of timezone bug
  // Instead do the translation ourselves.
  static $days;
  if ( ! $days ) {
    $days = array(
    t('Sunday'),
    t('Monday'),
    t('Tuesday'),
    t('Wednesday'),
    t('Thursday'),
    t('Friday'),
    t('Saturday'),
    );
  }
  $fields = getdate($time);
  return $days[$fields['wday']];
}

function _metakinisi_computed_headers() {
  return array( t('Date'), t('Weekday'), t('Start'), t('Duration'), t('Length'), t('Speed (Km/h)'));  
}

function _metakinisi_computed_values($t) {
  $date = NULL;
  $time = '';
  $weekday = '';
  $duration = '';
  $length = '';
  $speed = '';
  if ( $t && $t->track_start != 0 ) {
    $date = date( 'd-m-Y', $t->track_start);
    $time = date( 'H:i', $t->track_start);
    $weekday = _metakinisi_weekday($t->track_start);
    $duration = _metakinisi_format_duration($t->track_duration);
    $length = _metakinisi_format_length($t->track_length);
    $speed = _metakinisi_format_speed($t->track_length, $t->track_duration);
  }
  if ( ! $date ) {
    if ( $t ) {
      switch( $t->status ) {
        case Metakinisi::STATUS_ERROR:
          $date = t('Error');
          break;
        case Metakinisi::STATUS_NO_DATA:
          $date = t('No Data');
          break;
        default:
          break;
      }
    } else {
        $date = t('Not computed yet');      
    }
  }
  return array($date, $weekday, $time, $duration, $length, $speed);
}

function _metakinisi_row($label, $value) {
  return array($label . ':', $value);
}
/**
 * Implementation of hook_node_view
 */
function metakinisi_node_view($node, $view_mode, $langcode) {
  if ( $node->type == 'track' ) {    
    $t = metakinisi_track($node);
    $rows = array_map( '_metakinisi_row',
            _metakinisi_computed_headers(), _metakinisi_computed_values($t));
    if ( $t ) {
      $rows[] = _metakinisi_row( t('Detected Route'), $t->title );
    }
    $value = theme('table', array( 'rows' => $rows));
    $node->content['track_summary'] = array(
      //'#markup' => theme('table', array( 'rows' => $rows)),
      '#markup' => $value,
      '#weight' => 10,
      //'#theme' => 'mymodule_my_additional_field',
    );
    if ( $t ) {
      $node->content['map'] = array(
        '#markup' => l(t('map'), "metakinisi/map/$node->nid"),
        '#weight' => 12,
        //'#theme' => 'mymodule_my_additional_field',
      );
    }
    if ( $t ) {
      $passes = metakinisi_passes($node);
      $rows = array();
      $headers = array( '', t('Stop'), t('Distance'), t('Time'), t('Speed (Km/h)'));
      $time0 = NULL;
      $last_distance = 0;
      $last_time = 0;
      foreach( $passes as $pass ) {
        if ( ! $time0 ) {
          $time0 = $pass->time;
        }
        $time = $pass->time - $last_time;
        $distance = $pass->distance - $last_distance;
        if ( ! $last_time ) {
          $time = 0;
        }

        $rows[] = array( $pass->seq, $pass->name,
            _metakinisi_format_length($pass->distance),
            _metakinisi_format_duration($pass->time - $time0),
            _metakinisi_format_speed($distance, $time),
            );
        $last_distance = $pass->distance;
        $last_time = $pass->time;
      }
      $node->content['passes'] = array(
        '#markup' => theme('table', array( 'rows' => $rows, 'header' => $headers)),
        '#weight' => 13,
      );      
    }
  }
}

/**
 * Implementation of hook_node_update
 */
function metakinisi_node_update($node) {
  if ($node->type == 'track' ) {
    db_query("DELETE pass FROM {metakinisi_pass} AS pass" .
            " JOIN {metakinisi_track} AS track ON pass.tid = track.tid WHERE track.nid = ?",
            array($node->nid));
    $q = db_delete('metakinisi_track')->
      condition( 'nid', $node->nid )->
      execute();
  }
}

/** The Trips page for the current user.
 */
function metakinisi_trips() {
  global $user;  
  $headers = array( t('Trip'), t('Line'));
  $headers = array_merge($headers, _metakinisi_computed_headers());
  $rows = array();
  $tracks = metakinisi_tracks($user->uid);
  foreach($tracks as $t) {
    $label = $t->label;
    if ( $t->route_id != $t->field_route) {
      $label = $t->label . " ?";
    }
    $row = array(l($t->title, "node/$t->nid"), $label);            
    $row = array_merge( $row, _metakinisi_computed_values($t));
    $rows[] = $row;
  }
  return theme('table', array( 'header' => $headers, 'rows' => $rows));
  
}

/** The Route Statistics page.
 */
function metakinisi_routes() {
  $headers = array( t('Line'), t('Origin'), t('Tracks'), t('Tracked Stops'), t('Speed (Km/h)'));
  //| sid | rid | tracks | stops | passes | unique_passes |

  $rows = array();
  $stats = metakinisi_route_statistics();
  foreach($stats as $t) {
    $tracked = 0;
    if ( $t->stops )
      $tracked = (int) ($t->unique_passes * 100 / $t->stops) . '%';
    $rows[] = array(l($t->label, "metakinisi/route/$t->rid"), $t->first_name, $t->tracks, $tracked,
        _metakinisi_format_speed($t->speed, 1));
  }
  return theme('table', array( 'header' => $headers, 'rows' => $rows));  
}

/** The Route Info page.
 */
function metakinisi_route($node) {
  $headers = array( t('Sequence'), t('Stop'), t('Time'), t('Duration'), t('Deviation'), t('Measurements'));
  //| sid | rid | tracks | stops | passes | unique_passes |

  $stops = metakinisi_stops($node->nid);
  $time = 0;
  foreach($stops as $t) {
    $time += $t->duration;
    $rows[] = array( $t->seq, $t->name, _metakinisi_format_duration($time),
        $t->duration, $t->deviation, $t->count);
  }
  return theme('table', array( 'header' => $headers, 'rows' => $rows));  
}

/**
 * See Drupal file_transfer (file.inc)
 * @param type $node
 * @param type $file 
 */
function metakinisi_map_transfer($node, $file) {
  if (ob_get_level()) {
    ob_end_clean();
  }  
  $headers = array(
    'Content-Type' => 'text/html; charset=utf-8',
    'Content-Length' => filesize($file),
  );
  foreach ($headers as $name => $value) {
    drupal_add_http_header($name, $value);
  }
  drupal_send_headers();
  
  $fd = fopen($file, 'rb');
  if ( $fd ) {
    while (!feof($fd)) {
      print fread($fd, 1024);
    }
    fclose($fd);
  }
  drupal_exit();
}

function metakinisi_map($node) {
  global $user;
  if ( $user && $user->uid == $node->uid ) {
    $map_dir = variable_get('metakinisi_map_dir', '/var/opt/metakinisi/maps');
    if ( $map_dir ) {
      $file = "$map_dir/$node->nid.html";
      if ( file_exists($file)) {
        metakinisi_map_transfer($node, $file);
      }
    }
    return t('Map is not available');
  }
  drupal_access_denied();
}

/**
 * Implementation of hook_block_info().
 */
function metakinisi_block_info() {
  $blocks = array();
  $blocks['status'] = array(
    'info'       => t('Trip Statistics'),
    'cache'      => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_info().
 */
function metakinisi_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'status':
      $block['subject'] = t('Trip Statistics');
      $block['content'] = metakinisi_statistics();
      break;
  }
  return $block;
}

function _metakinisi_schema() {
  static $schema;
  if ( ! $schema ) {
    $schema = new stdClass();
    $schema->routeContentType = 'route';
    $schema->nameField = 'field_name';
    $schema->directionField = 'field_direction';
    $schema->trackContentType = 'track';
    $schema->gpxField = 'field_gpx';
    $schema->routeField = 'field_route';  
  }
  return $schema;
}

function _metakinisi_count($sql, $args = array()) {
  $q = db_query($sql, $args);
  foreach ($q as $t) {
    return $t->count;
  }  
}

function metakinisi_statistics_compute() {
  $schema = _metakinisi_schema();
  $vars = array();
  $sql = "SELECT COUNT(*) AS count from {metakinisi_track} WHERE status = 1";
  $vars['trips'] = _metakinisi_count($sql);
  
  $sql = 'SELECT COUNT(DISTINCT sid) AS count FROM {metakinisi_pass}';
  $vars['trip.stops'] = _metakinisi_count($sql);
  
  $sql ='SELECT COUNT(DISTINCT sid) AS count FROM {metakinisi_stop}';
  $vars['total.stops'] = _metakinisi_count($sql);

  $sql = "SELECT COUNT(DISTINCT route_id) AS count from {metakinisi_track}";
  $vars['trip.routes'] = _metakinisi_count($sql);
  
  $sql = 'SELECT COUNT(*) AS count FROM {node} WHERE status = 1 AND type=?';
  $vars['total.routes'] = _metakinisi_count($sql, array($schema->routeContentType));
  return $vars;
}

function _metakinisi_replace_all( $template, $map) {
    foreach( $map as $variable => $replacement ) {
        $template = preg_replace( '#%' . $variable . '%#', $replacement, $template);
    }
    return $template;
}

function _metakinisi_stat($label, $v, $total = NULL) {
  $value = $v;
  if ( $total ) {
    $percent = (int) ($v * 100 / $total);
    $value = "$v ($percent%)";
  }
  return _metakinisi_row($label, $value);
}
  
function metakinisi_statistics() {
  $vars = metakinisi_statistics_compute();
  if (!$vars) {
    return FALSE;
  }
  //$template = 'trips=%trips% stops=%trip.stops%';
  //return _metakinisi_replace_all( $template, $vars );
  $rows = array();
  $rows[] = _metakinisi_stat(t('Trips'), $vars['trips']);
  $rows[] = _metakinisi_stat(t('Routes'), $vars['trip.routes'], $vars['total.routes']);
  $rows[] = _metakinisi_stat(t('Stops'), $vars['trip.stops'], $vars['total.stops']);
  return theme('table', array( 'rows' => $rows)); 
}